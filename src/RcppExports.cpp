// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nigCpp
NumericVector nigCpp(NumericVector x, NumericVector y, double a1, double a2, double b1, double b2, double b3, double theta, double pi);
RcppExport SEXP _briskaR_nigCpp(SEXP xSEXP, SEXP ySEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP thetaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(nigCpp(x, y, a1, a2, b1, b2, b3, theta, pi));
    return rcpp_result_gen;
END_RCPP
}
// geometricCpp
NumericVector geometricCpp(NumericVector x, NumericVector y, double aa, double pi);
RcppExport SEXP _briskaR_geometricCpp(SEXP xSEXP, SEXP ySEXP, SEXP aaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type aa(aaSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(geometricCpp(x, y, aa, pi));
    return rcpp_result_gen;
END_RCPP
}
// FatTailCpp
NumericVector FatTailCpp(NumericVector x, NumericVector y, double a, double b);
RcppExport SEXP _briskaR_FatTailCpp(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(FatTailCpp(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// studentCpp
NumericVector studentCpp(NumericVector x, NumericVector y, double a, double b, double c1, double c2, double theta, double pi);
RcppExport SEXP _briskaR_studentCpp(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP thetaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(studentCpp(x, y, a, b, c1, c2, theta, pi));
    return rcpp_result_gen;
END_RCPP
}
// shift_fft_Cpp
arma::mat shift_fft_Cpp(arma::mat xx);
RcppExport SEXP _briskaR_shift_fft_Cpp(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_fft_Cpp(xx));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_briskaR_nigCpp", (DL_FUNC) &_briskaR_nigCpp, 9},
    {"_briskaR_geometricCpp", (DL_FUNC) &_briskaR_geometricCpp, 4},
    {"_briskaR_FatTailCpp", (DL_FUNC) &_briskaR_FatTailCpp, 4},
    {"_briskaR_studentCpp", (DL_FUNC) &_briskaR_studentCpp, 8},
    {"_briskaR_shift_fft_Cpp", (DL_FUNC) &_briskaR_shift_fft_Cpp, 1},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_briskaR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
